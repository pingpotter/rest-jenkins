#!/usr/bin/env groovy


pipeline {
    agent any
    
    /*
    environment {
        CI='true'
    }
    */

    tools {
        go 'Go-1.14'
    }

    options {
      disableConcurrentBuilds()
    }

    stages {
        stage('Preparation') {
            steps {
                checkout scm
            }
        }
        stage ('Compile') {
            steps {
                sh "${root}/bin/go build"
            }
        }
        stage ('Static Analysis'){
            withEnv(["GOPATH=${WORKSPACE}", "PATH+GO=${root}/bin:${WORKSPACE}/bin", "GOBIN=${WORKSPACE}/bin"]){
            sh "go get github.com/golang/lint/golint"

            try{
                sh "golint ."
                sh "go vet ."
            } catch (err){
                sh "echo static analyis failed.  See report"
            }
            
            warnings canComputeNew: true, canResolveRelativePaths: true, categoriesPattern: '', consoleParsers: [[parserName: 'Go Vet'], [parserName: 'Go Lint']], defaultEncoding: '', excludePattern: '', healthy: '', includePattern: '', messagesPattern: '', unHealthy: ''
            }
        }
        stage ('Test') {
            withEnv(["GOPATH=${WORKSPACE}", "PATH+GO=${root}/bin:${WORKSPACE}/bin", "GOBIN=${WORKSPACE}/bin"]){
                sh "go test -v -coverprofile=coverage.out -covermode count > tests.out"

                // convert tests result
                sh "go get github.com/tebeka/go2xunit"
                sh "go2xunit < tests.out -output tests.xml"
                junit "tests.xml"

                // convert coverage
                sh "go get github.com/t-yuki/gocover-cobertura"
                sh "gocover-cobertura < coverage.out > coverage.xml"

                step([$class: 'CoberturaPublisher', coberturaReportFile: 'coverage.xml'])
        }
      }
    }

    post {
      always {

        archiveArtifacts '**/tests.out, **/tests.xml, **/coverage.out, **/coverage.xml, **/coverage2.xml'
        
        echo 'email job results'
        emailext (
          body: "${currentBuild.currentResult}: Job ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n More info at: ${env.BUILD_URL}",
          recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
          subject: "Jenkins Build ${currentBuild.currentResult}: Job ${env.JOB_NAME}, Build ${env.BUILD_NUMBER}",
          to: "victor.parmar@usb.ch, joshy.cyriac@usb.ch"
        )
      }
    }
}