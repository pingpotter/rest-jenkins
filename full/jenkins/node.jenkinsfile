#!/usr/bin/env groovy

node() {
  
  def root = tool name: 'Go-1.14', type: 'go'

  stage('Preparation') {
    checkout scm
  }

  stage ('Compile') {
    sh "ls -lrt"
    dir('full') {
        sh "${root}/bin/go build"
    }
  }
  stage ('Static Analysis'){
    withEnv(["GOPATH=${WORKSPACE}", "PATH+GO=${root}/bin:${WORKSPACE}/bin", "GOBIN=${WORKSPACE}/bin"]){
      sh "go get -u golang.org/x/lint/golint"

      dir('full') {
          try{
            sh "golint ."
            sh "go vet ."
          } catch (err){
            sh "echo static analyis failed.  See report"
          }
      }
    }
  }
  stage ('Test') {
      dir('full') {
       withEnv(["GOPATH=${WORKSPACE}", "PATH+GO=${root}/bin:${WORKSPACE}/bin", "GOBIN=${WORKSPACE}/bin"]){
          sh "go test -v ./... -coverprofile=coverage.txt -covermode count  > tests.out"
            
          // convert tests result
          sh "go get github.com/t-yuki/gocover-cobertura"
          sh "gocover-cobertura < coverage.txt > cobertura-coverage.xml"

    
          step([$class: 'CoberturaPublisher', coberturaReportFile: 'cobertura-coverage.xml'])
        }
      }
  }
  stage ('Archive') {
      dir('full') {
        archiveArtifacts '**/tests.out, **/cobertura-coverage.xml'
      }
  }
}